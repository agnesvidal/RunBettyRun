package se.lnu.stickossdk.net{	//-----------------------------------------------------------	// Import	//-----------------------------------------------------------		import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;		//-----------------------------------------------------------	// Internal class	//-----------------------------------------------------------		/**	 *	Paketklass som används för att hämta information från 	 *	StickOS Highscore API. Varje paket representerar ett 	 *	API-anrop.	 *	 *	@version	1.1	 *	@copyright	Copyright (c) 2012-2013.	 *	@license	Creative Commons (BY-NC-SA)	 *	@since		2013-01-14	 *	@author		Henrik Andersen <henrik.andersen@lnu.se>	 */	internal class HighscorePackage {				//-------------------------------------------------------		// Public properties		//-------------------------------------------------------				/**		 *	Innehåller sökvägen till det API-anrop som ska 		 *	utföras.		 * 		 *	@default ""		 */		public var query:String = "";				/**		 *	Referens till den metod som ska aktiveras i samband 		 *	med att ett API-anrop slutförs. Metoden förväntas 		 *	mottaga en parameter med svarsinformation i 		 *	XML-format.		 * 		 *	@default null		 */		public var callback:Function;				//-------------------------------------------------------		// Constructor methods		//-------------------------------------------------------				/**		 *	Skapar en ny instans av HighscorePackage.		 */		public function HighscorePackage() {					}				//-------------------------------------------------------		// Public methods		//-------------------------------------------------------				/**		 *	Skickar en ny förfrågan till StickOS Highscore API 		 *	utifrån de inställningar som finns i den publika 		 *	egenskapen query. Använd HighscoreQuery för att 		 *	skriva information till query-egenskapen.		 * 		 *	@return void		 */		public function send():void {			var request:URLRequest = getURLRequest(query);			var loader:URLLoader = getURLLoader();				loader.load(request);		}				//-------------------------------------------------------		// Private methods		//-------------------------------------------------------				/**		 *	Skapar och returnerar en ny URLRequest.		 * 		 *	@return URLRequest		 */		private function getURLRequest(URL:String):URLRequest {			var request:URLRequest = new URLRequest(URL);				request.method = URLRequestMethod.GET;						return request;		}				/**		 *	Skapar och returnerar en ny URLLoader.		 * 		 *	@return URLLoader			 */		private function getURLLoader():URLLoader {			var loader:URLLoader = new URLLoader();				loader.dataFormat = URLLoaderDataFormat.TEXT;				loader.addEventListener(Event.COMPLETE, onLoadComplete);				loader.addEventListener(IOErrorEvent.IO_ERROR, onLoadError);							return loader;		}				/**		 *	API-anropet till StickOS Highscore API lyckades.		 * 		 *	@param	event	Händelsereferens.		 * 		 *	@return void		 */		private function onLoadComplete(event:Event):void {			var data:XML = new XML(event.target.data);			disposePackage(event);			onCallback(data);		}				/**		 *	Felhantering då programkoden inte kan hämta 		 *	information från StickOS Highscore API.		 * 		 *	@param	event	Händelsereferens.		 * 		 *	@return void		 */		private function onLoadError(event:IOErrorEvent):void {			onLoadComplete(event);		}				/**		 *	Avaktiverar samtliga händelselyssnare och frigör 		 *	allokerat minne.		 * 		 *	@param	event	Händelsereferens.		 * 		 *	@return void		 */		private function disposePackage(event:Event):void {			event.target.removeEventListener(Event.COMPLETE, onLoadComplete);			event.target.removeEventListener(IOErrorEvent.IO_ERROR, onLoadError);		}				/**		 *	Aktiverar en eventuell callback-metod och returnerar 		 *	svarsinformationen från StickOS Highscore API.		 * 		 * 	@param	data	Information från API-anropet.		 * 		 *	@return void		 */		private function onCallback(data:XML):void {			if (callback !== null) {				callback(data);			}		}	}}