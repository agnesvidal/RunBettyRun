package se.lnu.stickossdk.net {		//-----------------------------------------------------------	// Import	//-----------------------------------------------------------		import se.lnu.stickossdk.system.Session;	//-----------------------------------------------------------	// Public class	//-----------------------------------------------------------		/**	 *	En klass för att kommunicera med StickOS Highscore API 	 *	som är en PHP- och MySQL-baserad plattform för att spara 	 *	spelresultat i StickOS-baserade arkadspel.	 *	 *	@version	1.1	 *	@copyright	Copyright (c) 2012-2013.	 *	@license	Creative Commons (BY-NC-SA)	 *	@since		2013-01-14	 *	@author		Henrik Andersen <henrik.andersen@lnu.se>	 */	public class Highscore {				//-------------------------------------------------------		// Private properties		//-------------------------------------------------------				/**		 *	En unik identifierare som används för att parkoppla 		 *	spel och highscore-resultat.		 * 		 *	@default 0		 */		private var _gameId:int = 0;				/**		 *	Ett objekt som lagrar temporär information vid 		 *	"smarta insättningar".		 * 		 *	@default null		 */		private var _smartObject:SmartSendObject;				//-------------------------------------------------------		// Constructor methods		//-------------------------------------------------------				/**		 *	Skapar en ny instans av Highscore.		 */		public function Highscore(gameId:int) {			_gameId = gameId;		}				//-------------------------------------------------------		// Public methods		//-------------------------------------------------------				/**		 *	Genomför en "smart insättning" av poängresultat till 		 *	databasen. Detta innebär att databasen enbart kommer 		 *	att spara poängresultat som är ett faktiskt 		 *	highscore. Standardinställningen är inställd på att 		 *	spara de tio bästa poängresultaten.		 *			 *	<p>När insättningen är klar aktiveras en 		 *	callback-metod dit information om insättningen 		 *	skickas i form av en obligatorisk parameter. 		 *	Informationen skickas i XML-format.</p>		 * 		 *	@param	table		Tabellen där poängsumman ska sparas.		 *	@param	score		Poängsumman som ska sparas.		 *	@param	range		Highscore-listans längd.		 *  @param	callback	Aktiveras när insättningen är klar.		 *	@param	player		Vilken spelare som styr inmatningen.		 * 		 *	@return void		 */		public function smartSend(table:int, score:int, range:int = 10, callback:Function = null, player:uint = 0):void {			_smartObject = new SmartSendObject(_gameId, table, score, range, callback, player);			checkScore(table, score, smartCheckForKeyboardUsage);		}				/**		 *	Genomför en direkt insättning av poängresultat till 		 *	databasen. Denna metod bortser inte från resultat som 		 *	inte är ett highscore-resultat, dvs allt som skickas 		 *	in sparas. För att göra "smarta insättningar" använd 		 *	istället smartSend-metoden.		 * 		 *	<p>När insättningen är klar aktiveras en 		 *	callback-metod dit information om insättningen 		 *	skickas i form av en obligatorisk parameter. 		 *	Informationen skickas i XML-format.</p>		 * 		 *	@param	table		Tabellen där poängsumman ska sparas.		 *	@param	score		Poängsumman som ska sparas.		 *	@param	name		Spelarens namn.		 *  @param	callback	Aktiveras när insättningen är klar.		 * 		 *	@return void		 */		public function send(table:int, score:int, name:String, callback:Function = null):void {			var highscore:HighscorePackage = new HighscorePackage();				highscore.query = HighscoreQuery.getSubmitQuery(_gameId, table, score, name);				highscore.callback = callback;				highscore.send();		}				/**		 *	Hämtar highscore-resultat från en specifik tabell i 		 *	databasen. Resultaten från hämtningen skickas till 		 *	callback-metoden som en obligatorisk parameter. 		 *	Informationen skickas i XML-format.		 * 		 *	@param	table		Tabellen där resultaten ska hämtas.		 *	@param	limit		Antalet resultat som ska hämtas.		 *  @param	callback	Aktiveras när hämtningen är klar.		 * 		 *	@return void		 */		public function receive(table:int, limit:int, callback:Function = null):void {			var highscore:HighscorePackage = new HighscorePackage();				highscore.query = HighscoreQuery.getReciveQuery(_gameId, table, limit);				highscore.callback = callback;				highscore.send();		}				/**		 *	Kontrollerar vilken position en poängsumma får i den 		 *	aktuella highscore-listan. Metoden kan användas för 		 *	att kontrollera om en poängsumma ska räknas som ett 		 *	highscore eller inte. Resultaten från kontrollen 		 *	skickas till callback-metoden som en obligatorisk 		 *	parameter. 		 *	Informationen skickas i XML-format.		 * 		 *	@param	table		Tabellen som ska kontrolelras.		 *	@param	score		Poängsumman som ska kontrolleras.		 *  @param	callback	Aktiveras när hämtningen är klar.		 * 		 *	@return void		 */		public function checkScore(table:int, score:int, callback:Function = null):void {			var highscorePackage:HighscorePackage = new HighscorePackage();				highscorePackage.query = HighscoreQuery.getCheckQuery(_gameId, table, score);				highscorePackage.callback = callback;				highscorePackage.send();		}				/**		 *	...		 * 		 *	@param table Tabellen som skall rensas		 * 		 *	@return void		 */		public function resetTable(table:int = 1):void {			var highscorePackage:HighscorePackage = new HighscorePackage();				highscorePackage.query = HighscoreQuery.getResetQuery(_gameId, table);				highscorePackage.send();		}				//-------------------------------------------------------		// Private methods		//-------------------------------------------------------				/**		 *	@private		 */		private function smartCheckForKeyboardUsage(response:XML):void {			if (response['header']['position'] <= _smartObject.range) {				Session.screenKeyboard.activate(smartCheckForHighscoreInsertion, _smartObject.player, "Enter name");			} else {				_smartObject.callback(response);			}		}				/**		 *	@private		 */		private function smartCheckForHighscoreInsertion(name:String):void {			//TODO: FIXA			if (name == "") _smartObject.callback(new XML());			else send(_smartObject.table, _smartObject.score, name, _smartObject.callback);		}	}}